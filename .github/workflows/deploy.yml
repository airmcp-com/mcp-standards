name: Deploy to airmcp.com

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "DEPLOY_HOST=staging.airmcp.com" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/var/www/staging" >> $GITHUB_ENV
          else
            echo "DEPLOY_HOST=airmcp.com" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/var/www/airmcp" >> $GITHUB_ENV
          fi

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy to server
        run: |
          # Create deployment script
          cat > deploy.sh <<'EOF'
          #!/bin/bash
          set -e

          cd ${{ env.DEPLOY_PATH }}

          # Backup current version
          git rev-parse HEAD > .previous-version

          # Fetch and checkout new version
          git fetch --tags
          git checkout ${{ github.ref_name }}

          # Update dependencies
          cd mcp-servers/claude-memory
          uv sync

          # Run health check
          timeout 5 uv run python run_server.py || true

          echo "Deployment completed successfully"
          EOF

          chmod +x deploy.sh

          # Copy and execute deployment script
          scp -o StrictHostKeyChecking=no deploy.sh deploy@${{ env.DEPLOY_HOST }}:/tmp/
          ssh -o StrictHostKeyChecking=no deploy@${{ env.DEPLOY_HOST }} 'bash /tmp/deploy.sh'

      - name: Health check
        run: |
          echo "Waiting for service to start..."
          sleep 10

          # Test health endpoint (if exists)
          curl -f https://${{ env.DEPLOY_HOST }}/health || echo "Health check endpoint not available"

          # Verify version
          ssh deploy@${{ env.DEPLOY_HOST }} "cd ${{ env.DEPLOY_PATH }}/mcp-servers/claude-memory && uv run python -c 'import claude_memory; print(\"Version check passed\")'"

      - name: Rollback on failure
        if: failure()
        run: |
          ssh deploy@${{ env.DEPLOY_HOST }} << 'EOF'
            cd ${{ env.DEPLOY_PATH }}
            if [ -f .previous-version ]; then
              PREVIOUS=$(cat .previous-version)
              echo "Rolling back to $PREVIOUS"
              git checkout $PREVIOUS
              cd mcp-servers/claude-memory
              uv sync
            fi
          EOF

      - name: Notify deployment
        if: always()
        run: |
          STATUS="${{ job.status }}"
          VERSION="${{ github.ref_name }}"
          ENV="${{ github.event.inputs.environment || 'production' }}"

          echo "Deployment Status: $STATUS"
          echo "Version: $VERSION"
          echo "Environment: $ENV"
          echo "URL: https://${{ env.DEPLOY_HOST }}"

  post-deploy:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success()
    steps:
      - name: Update status page
        run: |
          echo "Deployment successful to ${{ github.event.inputs.environment || 'production' }}"
          echo "Version ${{ github.ref_name }} is now live"

      - name: Clear CDN cache
        run: |
          # If using Cloudflare or similar CDN
          echo "CDN cache clearing would happen here"
